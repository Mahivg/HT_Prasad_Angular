Email:
subramaniant05@gmail.com,
prasadashok@hotmail.com

WWW => World wide web

	Basic Web Components :
	
		1. HTML
		2. CSS , CSS3 (flex : grid)
		3. Javascript, ES5, ES6
		
	Browser => Browser Engine
				Chrome(client Tool)(ES6), Mozilla, Edge, IE (ES5),

	HTML
		Its not a programming language
		
		Tag based programming
		
			<open-tag></close-tag>
			<h1 id="" name="" style="" class=""> </h1>, <img />
	Basic structure of html
		extension .html
		<html>
			<head>
				Additional info
			</head>			
			<body>
				content | view port
			</body>
		</html>
		
			
	1. Text based Tags
	
		Headings : h1,h2,h3,h4,h5,h6
		
	Element type
	
		1. Block elements
			Takes entire width irrespective of content size.
			Always starts in new line
			it allows user to play with their height and width
		2. Inline Elements
			Takes only width of content
			Cant play with their height and width
			
		3. Inline-block-elements
			same as inline elements  
			expect we can control over height and width
	
		display: block | inline | inline-block;
		
		Rules :
		
			Block => inline  (correct)
			Inline => block (block will dominate)(wrong)
			
			
		Form tags
			
		Grouping tags
			
			section  => Large category, block grouping
			
			div => sub-category, block grouping
			
			span => inline grouping
			
	CSS
		Cascading Style Sheet
		
		key : value
		
		CSS3 => 3rd version
		
		scss | sass => CSS preprocessor => compiler => css
		
		3 ways to add css to your html
			
				1. Inline styling => specificity => 100
					<p style="color: red;" > </p>
				2. Internal styling
					<style> </style>
					element selector 					
						h1, h2, h3 { }
					based on Attribute
						h2#secondh2{}
						
					class selector
						CSS class => 
						.myClass {
							font-size: 30;
							color: grey;
						}
						
						<h4 class="myClass myClass2 myClass3"> </h4>
						
						<div class="myClass"> </div> 
						
						
						Pseduo styling : 
							div#someiD > p {
								
							}
							
							div + p {
								
							}
							
							table {
							
							tr:nth-child(odd) { }
							
							p:first-child, last-child, nth-child(4), nth-child(odd | even)
				3. External styling
				
					create a file with extension .css => css files =< styling files
					
					
				element | identified-element | .class {
					key: value;
					key: value;
				}
				CSS units :

					sizing => percentage(%)
					
					pixel (px),
					font : em, rem => relative unite
					
						Div parent => fontsize- 16px
						
							div child => 0.5rem => 16px
				
			Text-based stylings 
				
				color :
				named-values
					red, green,blue, yellow,  lightblue, lightyellow
				variation
				
					Red, Green, Blue => primary color 
					
						color : #0-f => 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f
								RGB
						color: #fff; white; #000; black
						
						color: #06e;
						
						color: #0d6d41; 
						
						color: rgb(0,0,0) => 0 -> 255
						
				font-size: 20px;
				font-family: 
				
				text-align: center | right | left | justify
				
				
				display : block , inline, inline-block, none
				
				Layouts :
				
					display: table | flex | grid;
						
							
					
				Visiblity
				
					visibility : hidden | visible
					
					display: none | block;
					
			
			
			Element Box Model
			
				p => Final computed view 
				
					<p> Test </p>
					
					<p> Test 2 </p>
					
					
						4 properties
						
							content => content
							
							padding => distance b/w content and corner borders
							
							border => corder
					
							margin => distance bw subordinate
							
							{
								padding: 10px;
								margin: 10px;
								margin: 10px 20px; top-bottom left-right
								padding-top: 10px;
								
									=> padding-top : 10px;
									=> padding-right : 10px;
									=> padding-bottom: 10px;
									=> paddding-left: 10px;
									
								border: width of border type of border color of border;
								
								border : 1px solid red;
								
							
							}
					
					Test
					
					Test 2
					
						
			Positioning
				
					position: static | initial |Initial
					
					position: fixed | absolute | relative
					
					top | left | right | bottom
					body -> position -> relative
					
					parent -> relative
					
						child -> absolute
						
			Transform
			
				transform : rotate | scale | translate
				
					rotate
					
			Box-shadow
			
				box-shadow : horizonatal vertical blur spread color;
				
				box-shadow: 20px 20px 10px 5px black;
				
						
					
			Laying out :
			
			Parent:			
				display: flex;
				flex-direction: 
				
				// on X-axis || horizontally aligns
				justify-content : flex-start | flex-end| center | space-between | space-around
				
				// on Y-axis || Vertically aligns
				align-items : flex-start | flex-end | center | space-between | space-around
				
		Javascript
		
			data variables and  functions
			
			Global level objects
			
				window, document
				
				window.
				
				document.
				
			data types
			
				number, string, booleab, Date
				
				undefined, null, NaN,
				
				
				
			varible keywords
			
				var, let and const
				
				var i = 1;
				
				typeof(i)
				
				"number"
				
			Dynamic Typing || run time typing
			
			//var name = "test";
			
			function getName() {
			
				let name = "test";
				const PI = 3.14;
				return name;
			}
			
			
			function getFullName() {
				return name + "lastName";
			}
			
			Array
			
				var d = [1,2,3,4,5];
				d[0] = 1
				d[1] = 2
				d[2] = 3
				var d1 = d.map(value => value * 2);
				d1 = [2, 4, 6, 8, 10]
				
				var d3 = d1.filter(value => value % 2 == 0)
				[2,4]
				forEach
				
				d1.findIndex(3)= 2
				
				slice 
				
				d1.slice(2) => [3,4,5]
				d1.slice(1, 4) => [2,3,4,5]
				d5 = d1.slice(0, defaulr(end of arrray) => [[1,2,3,4,5]
				
				typeof(d) => object 
				
				
				
			JSON type, Javascript Object Notation
			
				var name = "Magesh"				
				var age = "25";
				
				var person = {				
					name: "magesh",
					age: 26
				};
				var person1 = {				
					name: "magesh",
					age: 26
				};
				
				var name = person["name"];
				
				var salary = person["his salary"];
				
				
				Strings
					"Test", 'test', `test`;
				
				console.log("My Name is " + name + " and age is " + age);
				
				
				
				console.log('My Name is ' + name + ' and age is' + age);
				
				
				console.log(`My Name is ${name} and age is ${age}
						hkjhjads
						
						asbjasdasd`);
				
				My Name is Magesh and age is 26
				
			
				JSON.stringify(person)
				
				TWO objects are equal
				
					person == person1 // false 
					
				JSON.stringify(person) == JSON.stringify(person1) => true
				
				var res = serive.getVlaue();
				
				if(res) {
					
				}
				
				
				if
					truthy || false
					
					if(true, obj {}, 1, "3e3ed")
					
					if(false, 0, null, undefined, "")
				
				else if
				
				for(var i = 0; i < n; i++){}
				
				while(3){}					
				
				Dynamic Typing => Disadvantage				
				
				var d = "test";
				
				typeof(d) => "string";
				
				d = 10;
				
				typeof(d) => "number";
				
				1 + 1 => 2
				
				"1" + "1" => 11
				
				function add(num1, num2) {				
					return num1 + num2;
				}
				
				add(1,1) => 2
				
				add("1", "1") => "11";
				
		Javascript into applicaiton
		
			<script> tag on head
			
			file => .js => 
			
			
			
		HTTP calls
			interacting with outside apps
			
				var xHttp = new XMLHttprequest();
				
				xHttp.open('GET', "www.google.com");
				
				xHttp.send();
				
				xHttp.onReadyStateChange = function() {
				
					if(this.readyState == 4 && this.status == 200 ) {
					
					}
				}
				
		
		Typescript .ts
		
			superset of javascript
			
				Base javscript
				
			TSC => typescript .ts to javascript .js
				
		Typscript
			
			tsc filename =>
			
		Environment setup
		
			VS Code
				ESLint
				Prettier
				Debugger for chrome
				Angular Essentials John papa
				Angular snippets
				
			
			Nodejs
				node -version
				npm -v
			
				npm 
				
			npm install -g typescript
				
				tsc -v
				
			npm install -g @angular/cli			
			
		
		Typescript 
		
			typed javascript
		
			typescript compile 
				typescript => javascript				
						mention => es6, es2015
		
			object oriented programming
			
				class, interface
				
			types: 
			
				number, string, boolean 
				
				null, undefined
			
				var myName: string;
				
				object
				
				Arrays
				
				Tuple 
				
				var myTuple: [number, string]
				
				myTuple = [1, "2"];

				enum Role { ADMIN, USER } 
				
				let myEnum: Role;
				
				myEnum = Role.ADMIN | Role.USER
				
				var confused: any;
				confused = 1;
				confused = "test";
				
				var assumption: number | string; // Union
				
				function add(num1, num2) {
				
					return num1 + num2;
				}
				
				function add(num1: number, num2: number) : number {				
					return num1 + num2;
				}
				
				var added = add(1,2);
				
				
				
			Angular
			
				Node => browser engine away from browser
					node package manager => npm
					
						npm install => 
						
						npm install -g typescript => typescript => system level
						
							tsc 
							
						project level
						
							npm install "some library name"
							npm install "some library name"
							npm install "some library name"
							npm install "some library name"
							npm install "some library name"
							
							Prasad => node_modules => some library name => 4.0.0							
																		=> 4.2.0
							
							
							npm --init
								
							package.json => 
							
								{
									dependencies : {
										"some library name" : "4.2.0",
										"some library name" : "4.0.0"
										"some library name" : "4.0.0"
										"some library name" : "4.0.0",
										"bootstrap" : "~3.3.10"
									}
								
								}
								
							package-lock.json
							
								bootstap 
								
							
								
							Magesh => 
							
								npm install bootstrap
							
								package.json
								Node_modules
								npm install =>
								
							Javascript libraries => node based javascript frameworks
							
								
				
					script.js => index.html
					
					
				Angular					
					package.json => angular libraries
					tsconfig.json => typescript
					
					Node => webpack => bundle
						 => ivy renderer => html + javscript => JSX
						 
				Best enterprise application
				
				Angualr 
				
					1.X => AngularJs => javascript
					
					2.X => typescript => Angular  => Jit compliler => typescript.2.0
					
						core concept
						
						every 6 month =>
						
						backward-compatibility = > 9 to 10 <-> 10 - 9 		
					
						
					10.X => ivy renderer => 4.0 => any
					
					Component based MVC => Model View Controler
					
					nav-bar component
						controller
						view
						Model
						css
						<app-nav> </app-nav>
					side-bar-component
						controller
							var name
							data manipulation
						view
							name							
						Model
						css					
					
					angular/cli
					
						command promt => ng --version
						
						ng 
				Angular
					Single page application
					
						only one fule with html tag						
					
						<html>
							<body>	
								<div>							
									placeholder
								</div>
							</body>						
						</html>
						
					Angular component based
						parts 
						
						Root component 
						
							child
								child
								
								Functionality sepeatred
								
					Angular cli 
					
						ng commands
						
						Creating a project
						
						
					1. ng new ApplicationName
					
						ng new MyFirstApp --styles=css
						
						1. Routing include ?
						
						2. What type of Css?
						
						Angular will give a seed applicaiton
							
							needed dependencies -> package.json
							customize
							
						
							
							
							<body>
								<app-nav>
								<app-home>
								
								<app-footer></app-footer>
							</body>
				
				
				Angular defaulr module
				
				App Module => root module
				App component => root component
				
					modules
						Product Module
						Shopping module
						
						RoutingModule => Routing components, services, are included to our applicationb
						
					different component
						
					services
					
					Product Module
						different component
							list component
							view component
						services
					
					Shopping module					
						different component
						services
					
					Payment module					
						different component
						services
					
					
				
				package	
				
					different dll
				
				
				
				Root component?

					in main.ts
				
				ng serve => by default localhost:4200
				ng serve --port=5300 => localhost:5300
				
				SPA 
				
					html => index.html
					
					in Index.html => only we can see bootstrap component => app-root
					
					
			Component
			
				normal TS class
				
				with annotated or decorated wit @Component
				
				h1 {
					color: red;
				} => <h1> </h1>
				
				.h1 {
				}
				
				input[type="text"] {
				
				}
				
				@Component({
					selector : 'app-root' // <app-root> </app-root>
					selector : '.app-root' // <div class="app-root">
					selector : '[app-root]' // <div app-root>,
					
					template: "<h1> Test </h1>",				
					templateUrl : "./app-component.html",
					styles: [],
					styleUrl: "./app-component.css"
				})
					
					
					
			ng generate component component-name
			
			ng g c component-name			
			
			ng generate directive directive-name
			
			ng g d directive-name
			
			ng g s service-name
					
					
					
					
			ShoppingCart
			
				Login Page
					=> login-component
				
				Product 
					ProductList => add button
					
						=> product-list-component
					
					ProductDetail
						=> product-detail-component
				
				Cart
					CartList
					=> cart-list-component
					
					=> Checkout
					
						** checkout-component
						
				Data binding
				
					Accesing data

					One way data binding
					
						Controller to View
							a = 10;
							String Interpolation
								{{ a }} => 10 // {{ expression which can be evaluvated by JS engine }} => {{ 1 + 1 }}
							property binding
							
								[] => 
								textContent= "{{1 + 1}}" // String interpolation
								[textContent]="1+1" // property binding						
						
						View to Controller
						
							Event binding
							
								() =>
								
								onClick  => (click)= "function from controller"
								onMouseOver => (mouseover)
						
					Two way			
						Will come once we see About FORMS
						Combination of above two
						
				
				document.getElementById
				
				
				Template Reference 
				
					<div #myDiv>
					</div>
					
					<input id='test" #myText/>
					
					// var myText = document.getElementById('test');
					
					
				
					
				<form>
				
				
					<input id='test" #myText/>
					
					<input id='test" #myText/>
					
				Angular Form
				
			
			Directives :
			
			
				Inbuilt angular directive
				
				
					Attribute Directives
					
						it will add some additional behaviour to our html element
						
							style, class
							
							
							ngStyle, ngClass
							
							<h1 style="color: red" class="myClass1" > Test </h1>
							
							Controller
								applyRed: boolean;
								
								applyGreen: boolean;
							
							<h1 [ngStyle]="> Test </h1>
							[ngStyle] = "{ 'color: applyRed ? 'red' : 'green' }" 
							
							[ngClass] = "{ 'myClass' : applyClass, 'myClass2' : applyClass2 }";
				
					Structural Directive
					
						it will play with DOM Tree
						
						*
						
						ngFor, ngIf, ngShow, ngHide
					
						<h1 *ngFor="let i of [1,2,3,4,5]"> Test </h1>
						
						<ng-container *ngIf="showDivElse.length > 0">
							<div *ngFor="let i of sampleArr" >
							
								<div>
								
									{{ i }}
								
								<div>
							
							</div>
						</ng-container>
						<h1 *ngIf="applyGreen"> Test </h1>
					

		wrappers					
				
				ng-template
					short html elemens
				
				ng-container
				
					larger html
				
				ng-content
				
				
		Appcomponent
		
			Navbar component
		
			product-list-component => view
			
				product-detail-component
				
		Component Interaction
		
		
			Parent to Child
			
				@Input
					Getting data from Parent
					[] => property binding
												@Input
					child having one variable => product
					
					parent having an object with value => selectedProduct
					
					[product]="selectedProduct"				
					
				
				@Output
				
					myCustomOut = new EventEmitter<Product>();
					
					() => event binding
					(click) => Click Event
					
					(click)="MethodFromCOmponent($event)"
					
					(myCustomOut)					
			
			Cross component
			
				using parent communicate with child => @Input , @output
				
				Without mediator => Subjects => BehaviourSubject => Client, Server
			
			
		Now All component are visible
		
		Appcomponet
		
			recieves logging status
			receive app
			Login			
				login() => emit logging status
				user emit
			
			only after logged in show
			push to product list
				product list
			
					product detail
				
				
				
		Object
		
			Singleton
			
			emp1 => first-component 
						emp1.setName("magesh")
					second-component
						emp1.getName()
						
			Dependecny Injection
			
				object is created and available somewhere		
				
					emp1 => first-component
							Same reference
							constructor(private emp1 : Employee){}
							emp1.setName("magesh")
						second-component
							same reference
							constructor(private emp2 : Employee){}
							emp2.getName() => magesh
							
		constructor(private emp1 : Employee){}
		
		Life cycle methods		
		
			To detect the changes only in @Input type variable
			ngOnChanges(simpleChanges: SimpleChanges) {  => OnChanges
				console.log(simpleChages);
				{
					oldValue: {},
					newValue: {}
				}
			}			
			
			
			After constructor Initialized
			
			ngOnInit(){ => OnInit
				varible declaration,
				startup actions
			}			
			
			any changes in ur view			
			ngDoCheck(){}
			
			ngAfterContentInit(){}
			
			ngAfterContentChecked(){}
			
			ngAfterViewInit(){}			
			
			ngAfterViewChecked(){}
			
			// whenever ur component gets out of DOM Tree
			ngOnDestroy(){
				// clean up code
			}
		
		
				
				
					
					
					private p1: Product  = new Product();
					
					23438u4u9845
					
					
					
			Angular Services are singleton
			
				Instance creation control not in user hand
				
				Angular framework will manage the instance creation
				
				Dependency Injection pattern
				
				Employee clss
					xx01 -> instance will be created
					first-component
						let emp1 : Employee
						
						constructor(emp1: Employee){}
					
					second-component					
						let emp2: Employee
						
			Steps:
			
				Create a class -> MyFirstService
					create varaibles
					
			AppModule			
				providers: [MyFirstService]
					

			wherever u need, in that constructor give that variable name, it will get injected
			
			
			@Injectable({
				providedIn : 'root'
			})
			class MyFirstService {
			
			
			}
			
		AppModule
			declarations: [
				AppComponent, XX01
				MyTestComponent,
				MySecondComponent,
				MyThirdComponent
			],
			imports: [
				BrowserModule, ProductModule
			],
			//providers: [MyFirstService]
			
			const productRoutes: Routes = [
									  {
										path: 'pfirst', //localhost:4200/first
										component: MyTestComponentP
									  },
									  {
										path: 'psecond',
										component: MySecondComponentP
									  },
									  {
										path: 'pthird',
										component: MyThirdComponentP
									  }
									];
		
			ProductModule
				declarations: [ XX02
					MyTestComponentP, XX03
							providers: [ProductService]
					MySecondComponentP,
					MyThirdComponentP
				],
				imports: [
					BrowserModule.
					RouterModule.forChild(productRoutes)
				],
				providers: [ProductService]
			
			CartModule
				declarations: [XX01
					MyTestComponentC,
					MySecondComponentC,
					MyThirdComponentC
				],
				imports: [
					BrowserModule
				],
				providers: []
	
attributeDirective	
	<h1 showGreen></h1>		
		el: ElementRef
		
			
		Strucutral directive
	<wrapper>
		<h1 hideOdd></h1>	
	</wrapper>	
		vcr: ViewContainerRef	
		vcr.clear()
		
	
	Routing
	
		Based on URL change, u can see the component		
		
		localhost:4200/login => login component
		
	First step:
	
		1) RoutingModule -> Include in AppModule
				if it is Rootmodule -> RouterModule.forRoot()
				else 
					RouterModule.forChild()
		
		2) Define routes ->
		
				For which path, which component
				
				There is a inbuild model type called Route.
		
		3) configure the routes
		
		4) define placeholder
		
			<router-outlet>
				
			</router-outlet>
			
		5) Define action to change using routerLink
		
				routerLink="first"
		
		
		
		App
			localhost:4200/productDetail ->
			productList
			<a class="btn btn-primary" routerLink="productDetail"> ProductDetail </a>
			
			localhost:4200/productDetail/productDetail -> relativepath
			localhost:4200/productDetail -> absolute path
				productDetail
					<a class="btn btn-primary" routerLink="/productDetail"> ProductDetail </a>
					
	Programatically redirecting routes: 
	
		1) request angular to provide router service
		
		2) use this.router.navigateByUrl('path of the component')
		
		3) this.router.navigate(['products']);
		
	Parametrized routing
	
		{
		
			path: 'products/:id', // id=""
			path: 'products/p001 => id="p001"
			component: ProductDetailComponent
						id="p001"
		}
		
		
		localhost:4200/products/p001
		['prodcts', 'p001']
		
		
		localhost:4200/products/p001/details
		['prodcts', 'p001', 'details']
		
	Route Protection
	
		login => no protection
		
		/products/
		/prodcts/:id  => Need Protection
		
		In Angular
			
				Guard => Route Gaurd				
				
					Guard are nothing but a normal service class, having a method which returns a boolean.
		
		
		publish -> subscribe
		
			Observable<Param>
				Wrapper class => BehaviourSubject
				
			Observable<Employee>
			Observable<Product>
			Observable<Product[]>
			
			// Server
			
				.subscribe(
			
				Observe
				
				Observer				
				
			Listening component
				
			// Client
			
			Emiting client
			
				Emit => Param
	
				
	FORMS
		PIPES
	HTTP_CALLS
	
	
	FORMS:
	
		<input id="userName" type="text" />
		
		<input id="password" type="password" />
	
		let uName = document.getElementById("userName").value
		let pass = document.getElementById("password").value
	
		{		
			userName: uName,			
			password: pass			
		}
		
	Angular Way:
	
		1) FormsModule => "@angular/forms"
		
		2) <form> </form>
		
		3) Type of form:
		
			i) Template Driven
				-> Form will be created in HTML then passed to Controller			
			ii) Reactive Form
				-> FOrm will be created in controller then binded to HTML
		4) your data can be two way binding
		
			userName = "testtttttttttttt"
			
				
			<input id="text" name="testName" [ngModel]="userName" />
	
			testtttttttttttt
			
		5) handling submit action
		
				<form (ngSubmit)="method()">
				
					input
					
					input
					
					<button></button>
				</form>

		
	Template driven form
	
		Form need to be created in HTML
		
		gained form instance my using #myForm="ngForm" 
		
		We handled submit event and passed the form value (ngSubmit)="onForm(myForm)
		
		Add ngModel to all <input />
		
		
		